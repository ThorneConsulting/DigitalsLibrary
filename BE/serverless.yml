#org: vibhavdeo
#app: my-digitals-api
#The reason for hardcoding the arn of userpool is an open issue https://github.com/serverless/serverless/issues/3212#issuecomment-307341924
service: my-digitals-api

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: ap-southeast-2
  environment:
    DYNAMO_DB_FILE_META_DATA_TABLE_NAME: ${self:custom.fileMetaDataTable}
    DYNAMO_DB_HASH_TABLE_NAME: ${self:custom.hashTable}

custom:
  fileMetaDataTable: file-meta-data-${self:provider.stage}
  hashTable: hash-${self:provider.stage}
  apigwBinary:
    types: #list of mime-types
      - "multipart/form-data"

plugins:
  - serverless-plugin-typescript
  - serverless-apigw-binary
  - serverless-iam-roles-per-function
functions:
  getUserFiles:
    handler: api.getUserFiles
    name: get-user-files
    memorySize: 256 # MB
    timeout: 20 # seconds
    events:
      - http:
          path: /users/{userId}/files
          method: GET
          authorizer:
            arn: arn:aws:cognito-idp:ap-southeast-2:137481829477:userpool/ap-southeast-2_YVSpAqxya
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamoDB:GetItem"
        Resource: !GetAtt MyDigitalsMetaDataTable.Arn
      - Effect: "Allow"
        Action:
          - "dynamoDB:GetItem"
        Resource: !GetAtt MyDigitalsHashable.Arn
  uploadUserFile:
    handler: api.uploadUserFile
    name: upload-user-file
    memorySize: 256 # MB
    timeout: 30 # seconds
    events:
      - http:
          path: /users/{userId}/file
          method: POST
          authorizer:
            arn: arn:aws:cognito-idp:ap-southeast-2:137481829477:userpool/ap-southeast-2_YVSpAqxya
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamoDB:PutItem"
          - "dynamoDB:GetItem"
        Resource: !GetAtt MyDigitalsMetaDataTable.Arn
      - Effect: "Allow"
        Action:
          - "dynamoDB:PutItem"
          - "dynamoDB:GetItem"
        Resource: !GetAtt MyDigitalsHashable.Arn
      - Effect: "Allow"
        Action:
          - "s3:*"
        Resource: "*"
      - Effect: "Allow"
        Action:
          - "rekognition:DetectLabels"
        Resource: "*"
  deleteUserFile:
    handler: api.deleteUserFile
    name: delete-user-file
    memorySize: 256 # MB
    timeout: 20 # seconds
    events:
      - http:
          path: /users/{userId}/file
          method: DELETE
          authorizer:
            arn: arn:aws:cognito-idp:ap-southeast-2:137481829477:userpool/ap-southeast-2_YVSpAqxya
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamoDB:DeleteItem"
        Resource: !GetAtt MyDigitalsMetaDataTable.Arn
      - Effect: "Allow"
        Action:
          - "dynamoDB:DeleteItem"
        Resource: !GetAtt MyDigitalsHashable.Arn
      - Effect: "Allow"
        Action:
          - "s3:*"
        Resource: "*"
  createUserBucketIfNotExist:
    handler: api.createUserBucketIfNotExist
    name: create-user-bucket-if-not-exist
    memorySize: 256 # MB
    timeout: 20 # seconds
    events:
      - http:
          path: /users/{userId}/create-user-bucket
          method: POST
          authorizer:
            arn: arn:aws:cognito-idp:ap-southeast-2:137481829477:userpool/ap-southeast-2_YVSpAqxya
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "s3:*"
        Resource: "*"
resources:
  Resources:
    MyDigitalsMetaDataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.fileMetaDataTable}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    MyDigitalsHashable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.hashTable}
        AttributeDefinitions:
          - AttributeName: userFileHash
            AttributeType: S
        KeySchema:
          - AttributeName: userFileHash
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: my-digitals
        Schema:
          - Name: email
            Required: true
            Mutable: true
          - Name: phone_number
            Required: true
            Mutable: true
          - Name: address
            Required: true
            Mutable: true
          - Name: given_name
            Required: true
            Mutable: true
          - Name: family_name
            Required: true
            Mutable: true
          - Name: birthdate
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
        AutoVerifiedAttributes:
          - email
    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: my-digitals
        GenerateSecret: true
        UserPoolId: !Ref UserPool
        AccessTokenValidity: 1
        IdTokenValidity: 1
        RefreshTokenValidity: 1
        AllowedOAuthFlowsUserPoolClient: true
        CallbackURLs:
          - https://example.com
        LogoutURLs:
          - https://example.com
        AllowedOAuthFlows:
          - code
          - implicit
        AllowedOAuthScopes:
          - email
          - openid
        SupportedIdentityProviders:
          - COGNITO
        ExplicitAuthFlows:
          - "ALLOW_CUSTOM_AUTH"
          - "ALLOW_REFRESH_TOKEN_AUTH"
          - "ALLOW_USER_SRP_AUTH"
